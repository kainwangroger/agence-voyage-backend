1. Outils recommand√©s

| Besoin                        | Outil conseill√©                                                                                |
| ----------------------------- | ---------------------------------------------------------------------------------------------- |
| Backend Java                  | **Spring Boot** (avec Maven ou Gradle)                                                         |
| Base de donn√©es relationnelle | **PostgreSQL** ou MySQL                                                                        |
| IDE                           | **IntelliJ IDEA** ou **VS Code**                                                               |
| Tests                         | JUnit / Mockito                                                                                |
| API REST                      | Spring Web / Spring MVC                                                                        |
| ORM                           | **Spring Data JPA + Hibernate**                                                                |
| Authentification              | **Spring Security**                                                                            |
| Frontend                      | - Simple : HTML/CSS/JS + Thymeleaf                <br> - Moderne : Angular / React (optionnel) |
| Conteneurisation (optionnel)  | **Docker + docker-compose**                                                                    |



2. Pages principales de l‚Äôapplication


| Page                     | Fonctionnalit√© principale                |
| ------------------------ | ---------------------------------------- |
| Accueil                  | Pr√©sentation de l'agence                 |
| Liste des voyages        | Afficher les offres disponibles          |
| D√©tail d‚Äôun voyage       | Afficher infos compl√®tes d‚Äôun voyage     |
| R√©servation              | R√©server un voyage                       |
| Tableau de bord admin    | G√©rer voyages, clients, r√©servations     |
| Gestion des clients      | Ajouter / modifier / supprimer un client |
| Gestion des destinations | CRUD sur les villes/pays                 |
| Authentification         | Connexion / D√©connexion / Inscription    |
| Statistiques (optionnel) | Voir nb de r√©servations, revenus, etc.   |


 3. Langages de programmation

 | Type de t√¢che     | Langages utilis√©s               |
| ----------------- | ------------------------------- |
| Backend API       | **Java (Spring Boot)**          |
| Base de donn√©es   | **SQL** (PostgreSQL)            |
| Frontend (simple) | **HTML + CSS + JS + Thymeleaf** |
| Frontend (avanc√©) | **Angular / React** (optionnel) |


4. Mod√®le de base de donn√©es (tables)


Voici les tables principales que tu devrais pr√©voir :

üß≥ Voyage
        id (PK)

        destination

        date_depart

        date_retour

        prix

        places_disponibles

        description

üë§ Client
        id (PK)

        nom

        prenom

        email

        telephone

        mot_de_passe

üìù Reservation
        id (PK)

        client_id (FK ‚Üí Client)

        voyage_id (FK ‚Üí Voyage)

        date_reservation

        nombre_personnes

        statut (en attente / confirm√© / annul√©)

üåç Destination (optionnel si tu veux s√©parer)
        id (PK)

        ville

        pays

üõ°Ô∏è Utilisateur (si tu veux une vraie gestion des r√¥les/admins)
        id

        email

        mot_de_passe

        role (ADMIN / CLIENT)



5. Exemples d‚ÄôAPI REST


| M√©thode | URL                  | Fonction                |
| ------- | -------------------- | ----------------------- |
| GET     | `/api/voyages`       | Lister tous les voyages |
| POST    | `/api/reservations`  | R√©server un voyage      |
| GET     | `/api/clients/{id}`  | Voir profil client      |
| POST    | `/api/auth/login`    | Connexion utilisateur   |
| POST    | `/api/auth/register` | Cr√©er un compte client  |



6. Exemple d'architecture Spring Boot

src/
‚îî‚îÄ‚îÄ main/
    ‚îî‚îÄ‚îÄ java/
        ‚îî‚îÄ‚îÄ com/
            ‚îî‚îÄ‚îÄ monsite/
                ‚îî‚îÄ‚îÄ agencevoyage/
                    ‚îú‚îÄ‚îÄ AgenceVoyageApplication.java   ‚Üê classe principale
                    ‚îú‚îÄ‚îÄ controller/
                    ‚îÇ   ‚îî‚îÄ‚îÄ TestController.java       ‚Üê contr√¥leur ici !
                    ‚îú‚îÄ‚îÄ model/
                    ‚îî‚îÄ‚îÄ service/



 7. Exemple application.properties


 # Connexion PostgreSQL
spring.datasource.url=jdbc:postgresql://localhost:5432/AVG
spring.datasource.username=postgres
spring.datasource.password=ton_mot_de_passe

# JPA
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect


√âtape 3 ‚Äì Cr√©er les entit√©s principales

--- Voyage.java ---

@Entity
public class Voyage {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String destination;
    private LocalDate dateDepart;
    private LocalDate dateRetour;
    private Double prix;
    private int placesDisponibles;

    @Column(length = 1000)
    private String description;
}


---- Client.java ----

@Entity
public class Client {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String nom;
    private String prenom;
    private String email;
    private String motDePasse;
    private String telephone;
}


--- Reservation.java ----

@Entity
public class Reservation {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @ManyToOne
    private Client client;

    @ManyToOne
    private Voyage voyage;

    private LocalDateTime dateReservation;
    private int nombrePersonnes;
    private String statut; // confirm√©, annul√©, etc.
}
